arrange(desc(speed))
mtcars %>%
group_by(cyl) %>%
summarize(n = n())
mtcars |>
group_by(cyl) |>
summarize(n = n())
flights |>
group_by(month)
flights |>
summarize(
avg_delay = mean(dep_delay)
)
flights |>
groupby(month) |>
summarize(
avg_delay = mean(dep_delay)
)
flights |>
group_by(month) |>
summarize(
avg_delay = mean(dep_delay)
)
flights |>
group_by(month) |>
summarize(
avg_delay = mean(dep_delay, na.rm=TRUE)
)
flights |>
group_by(month) |>
summarize(
delay = mean(dep_delay, na.rm=TRUE),
n = n()
)
flights |>
slice_max(arr_delay, n = 1)
flights |>
group_by(dest) |>
slice_max(arr_delay, n = 1) |>
relocate(dest)
daily <- flights |>
group_by(year, month, day)
daily
daily_flights <- daily |>
summarize(n = n())
daily_flights <- daily |>
summarize(n = n())
daily_flights
daily_flights <- daily |>
summarize(n = n(),
.groups = "drop_last")
daily_flights
install.packages("Lahman")
library(Lahman)
batters <- Lahman::Batting |>
group_by(playerID) |>
summarize(
performance = sum(H, na.rm=TRUE) / sum(AB, na.rm=TRUE),
n = sum(AB, na.rm=TRUE)
)
batters
batters |>
filter(n > 100) |>
ggplot(aes(x=n, y=performance)) +
geom_point(alpha=1/10) +
geom_smooth(se=FALSE)
install.packages("reticulate")
install.packages("bayesrules")
install.packages("tidybayes")
install.packages("broom.mixed")
library(reticulate)
R.version.string
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("rprojroot")
install.packages("tidyverse")
install.packages("rstanarm")
install.packages("arm")
knitr::opts_chunk$set(message=FALSE, error=FALSE, warning=FALSE, comment=NA)
# switch this to TRUE to save figures in separate files
savefigs <- FALSE
library("rprojroot")
root<-has_file(".ROS-Examples-root")$make_fix_file()
library("rstanarm")
library("arm")
library("ggplot2")
library("bayesplot")
theme_set(bayesplot::theme_default(base_family = "sans"))
hibbs <- read.table(root("ElectionsEconomy/data","hibbs.dat"), header=TRUE)
head(hibbs)
if (savefigs) pdf(root("ElectionsEconomy/figs","hibbsdots.pdf"), height=4.5, width=7.5, colormodel="gray")
n <- nrow(hibbs)
par(mar=c(0,0,1.2,0))
left <- -.3
right <- -.28
center <- -.07
f <- .17
plot(c(left-.31,center+.23), c(-3.3,n+3), type="n", bty="n", xaxt="n", yaxt="n", xlab="", ylab="", xaxs="i", yaxs="i")
mtext("Forecasting elections from the economy", 3, 0, cex=1.2)
with(hibbs, {
for (i in 1:n){
ii <- order(growth)[i]
text(left-.3, i, paste (inc_party_candidate[ii], " vs. ", other_candidate[ii], " (", year[ii], ")", sep=""), adj=0, cex=.8)
points(center+f*(vote[ii]-50)/10, i, pch=20)
if (i>1){
if (floor(growth[ii]) != floor(growth[order(growth)[i-1]])){
lines(c(left-.3,center+.22), rep(i-.5,2), lwd=.5, col="darkgray")
}
}
}
})
lines(center+f*c(-.65,1.3), rep(0,2), lwd=.5)
for (tick in seq(-.5,1,.5)){
lines(center + f*rep(tick,2), c(0,-.2), lwd=.5)
text(center + f*tick, -.5, paste(50+10*tick,"%",sep=""), cex=.8)
}
lines(rep(center,2), c(0,n+.5), lty=2, lwd=.5)
text(center+.05, n+1.5, "Incumbent party's share of the popular vote", cex=.8)
lines(c(center-.088,center+.19), rep(n+1,2), lwd=.5)
text(right, n+1.5, "Income growth", adj=.5, cex=.8)
lines(c(right-.05,right+.05), rep(n+1,2), lwd=.5)
text(right, 16.15, "more than 4%", cex=.8)
text(right, 14, "3% to 4%", cex=.8)
text(right, 10.5, "2% to 3%", cex=.8)
text(right, 7, "1% to 2%", cex=.8)
text(right, 3.5, "0% to 1%", cex=.8)
text(right, .85, "negative", cex=.8)
text(left-.3, -2.3, "Above matchups are all listed as incumbent party's candidate vs.\ other party's candidate.\nIncome growth is a weighted measure over the four years preceding the election.  Vote share excludes third parties.", adj=0, cex=.7)
if (savefigs) dev.off()
if (savefigs) pdf(root("ElectionsEconomy/figs","hibbsscatter.pdf"), height=4.5, width=5, colormodel="gray")
par(mar=c(3,3,2,.1), mgp=c(1.7,.5,0), tck=-.01)
plot(c(-.7, 4.5), c(43,63), type="n", xlab="Avg recent growth in personal income", ylab="Incumbent party's vote share", xaxt="n", yaxt="n", mgp=c(2,.5,0), main="Forecasting the election from the economy      ", bty="l")
axis(1, 0:4, paste(0:4,"%",sep=""), mgp=c(2,.5,0))
axis(2, seq(45,60,5), paste(seq(45,60,5),"%",sep=""), mgp=c(2,.5,0))
with(hibbs, text(growth, vote, year, cex=.8))
abline(50, 0, lwd=.5, col="gray")
if (savefigs) dev.off()
M1 <- stan_glm(vote ~ growth, data = hibbs, refresh = 0)
print(M1)
prior_summary(M1)
summary(M1)
round(posterior_interval(M1),1)
if (savefigs) pdf(root("ElectionsEconomy/figs","hibbsline.pdf"), height=4.5, width=5, colormodel="gray")
par(mar=c(3,3,2,.1), mgp=c(1.7,.5,0), tck=-.01)
plot(c(-.7, 4.5), c(43,63), type="n", xlab="Average recent growth in personal income", ylab="Incumbent party's vote share", xaxt="n", yaxt="n", mgp=c(2,.5,0), main="Data and linear fit", bty="l")
axis(1, 0:4, paste(0:4,"%",sep=""), mgp=c(2,.5,0))
axis(2, seq(45,60,5), paste(seq(45,60,5),"%",sep=""), mgp=c(2,.5,0))
with(hibbs, points(growth, vote, pch=20))
abline(50, 0, lwd=.5, col="gray")
abline(coef(M1), col="gray15")
text(2.7, 53.5, paste("y =", fround(coef(M1)[1],1), "+", fround(coef(M1)[2],1), "x"), adj=0, col="gray15")
if (savefigs) dev.off()
if (savefigs) pdf(root("ElectionsEconomy/figs","hibbspredict.pdf"), height=3.5, width=6.5, colormodel="gray")
par(mar=c(3,3,3,1), mgp=c(1.7,.5,0), tck=-.01)
mu <- 52.3
sigma <- 3.9
curve (dnorm(x,mu,sigma), ylim=c(0,.103), from=35, to=70, bty="n",
xaxt="n", yaxt="n", yaxs="i",
xlab="Clinton share of the two-party vote", ylab="",
main="Probability forecast of Hillary Clinton vote share in 2016,\nbased on 2% rate of economic growth", cex.main=.9)
x <- seq (50,65,.1)
polygon(c(min(x),x,max(x)), c(0,dnorm(x,mu,sigma),0),
col="darkgray", border="black")
axis(1, seq(40,65,5), paste(seq(40,65,5),"%",sep=""))
text(50.7, .025, "Predicted\n72% chance\nof Clinton victory", adj=0)
if (savefigs) dev.off()
if (savefigs) pdf(root("ElectionsEconomy/figs","hibbsline2a.pdf"), height=4.5, width=5, colormodel="gray")
par(mar=c(3,3,2,.1), mgp=c(1.7,.5,0), tck=-.01)
plot(c(-.7, 4.5), c(43,63), type="n", xlab="x", ylab="y", xaxt="n", yaxt="n", mgp=c(2,.5,0), main="Data and linear fit", bty="l", cex.lab=1.3, cex.main=1.3)
axis(1, 0:4, cex.axis=1.3)
axis(2, seq(45, 60, 5), cex.axis=1.3)
abline(coef(M1), col="gray15")
with(hibbs, points(growth, vote, pch=20))
text(2.7, 53.5, paste("y =", fround(coef(M1)[1],1), "+", fround(coef(M1)[2],1), "x"), adj=0, col="gray15", cex=1.3)
if (savefigs) dev.off()
if (savefigs) pdf(root("ElectionsEconomy/figs","hibbsline2b.pdf"), height=4.5, width=5, colormodel="gray")
par(mar=c(3,3,2,.1), mgp=c(1.7,.5,0), tck=-.01)
plot(c(-.7, 4.5), c(43,63), type="n", xlab="x", ylab="y", xaxt="n", yaxt="n", mgp=c(2,.5,0), main="Data and range of possible linear fits", bty="l", cex.lab=1.3, cex.main=1.3)
axis(1, 0:4, cex.axis=1.3)
axis(2, seq(45, 60, 5), cex.axis=1.3)
sims <- as.matrix(M1)
n_sims <- nrow(sims)
for (s in sample(n_sims, 50))
abline(sims[s,1], sims[s,2], col="gray50", lwd=0.5)
with(hibbs, points(growth, vote, pch=20))
reticulate::repl_python()
setwd("~/Documents/r_sandbox")
library(tidyverse)
iris
libary(gtExtras)
install.packages("gtExtras")
libary(gtExtras)
library(gtExtras)
first_name <- "John"
last_name <- "Earl"
str_c(first_name, last_name, sep = " ")
setwd("~/GithubRepos/udemy/dswr_tidyverse_2023_intihar")
rm(list = ls())
graphics.off()
library(dplyr)
library(tidyr)
library(ggplot2)
library(hflights)
install.packages("hflights")
library(hflights)
df <- hflights
df %>% nrow(); df %>% ncol()
df %>%
select(Origin, Dest) %>%
distinct()
df %>%
select(Origin, Dest) %>%
distinct() %>%
pivot_longer(cols = everything(),
names_to = "origin/dest",
values_to = "airport") %>%
distinct(airport) %>%
arrange(airport)
df %>%
select(Origin, Dest) %>%
distinct() %>%
pivot_longer(cols = everything(),
names_to = "origin/dest",
values_to = "airport")
df %>%
select(Origin, Dest) %>%
distinct() %>%
pivot_longer(cols = everything(),
names_to = "origin/dest",
values_to = "airport") %>%
distinct(airport) %>%
arrange(airport)
df %>%
select(Origin, Dest) %>%
distinct() %>%
pivot_longer(cols = everything(),
names_to = "origin/dest",
values_to = "airport") %>%
distinct(airport) %>%
arrange(airport)
df %>%
filter(Cancelled == 1) %>%
nrow()
carrier.stats <- df %>%
group_by(UniqueCarrier) %>%
summarise(flights = n(),
`total distance flown (miles)` = sum(Distance),
`total ActualElapsedTime (h)` = round(sum(ActualElapsedTime, na.rm = TRUE)/60, 1),
`total AirTime (h)` = round(sum(AirTime, na.rm = TRUE)/60, 1),
`mean distance flown (miles)` = mean(Distance),
`total ActualElapsedTime (h)` = round(mean(ActualElapsedTime, na.rm = TRUE)/60, 1),
`total AirTime (h)` = round(mean(AirTime, na.rm = TRUE)/60, 1),
)
carrier.stats
carrier.stats %>%
select(UniqueCarrier,
distance = `total distance flown (miles)`) %>%
arrange(desc(distance)) %>%
mutate(rank = row_number(),
group = case_when(rank <= 3 ~ "top performer",
TRUE ~ "the rest")) %>%
group_by(group) %>%
summarise(carriers = n(),
distance = sum(distance)) %>%
ungroup() %>%
mutate(`distance %` = distance / sum(distance) * 100) %>%
arrange(desc(distance))
carrier.stats %>%
select(UniqueCarrier,
distance = `total distance flown (miles)`) %>%
arrange(desc(distance)) %>%
mutate(rank = row_number(),
group = case_when(rank <= 3 ~ "top performer",
.default = "the rest")) %>%
group_by(group) %>%
summarise(carriers = n(),
distance = sum(distance)) %>%
ungroup() %>%
mutate(`distance %` = distance / sum(distance) * 100) %>%
arrange(desc(distance))
library(stringr)
library(lubridate)
library(ggplot2)
df <- df %>%
mutate(year = Year,
month = Month,
dayofmonth = DayofMonth)
df <- df %>%
mutate(year = Year,
month = Month,
dayofmonth = DayofMonth) %>%
mutate_at(.vars = c("Month", "DayofMonth"),
.funs = str_pad, 2, "left", 0) %>%
unite(col = 'date', Year, Month, DayofMonth, sep = '-') %>%
mutate(date = lubridate::ymd(date)) %>%
mutate(quarter = quarter(date),
week = isoweek(date)) %>%
select(date, year, month, dayofmonth, quarter, week, DayOfWeek, everthing())
df <- df %>%
mutate(year = Year,
month = Month,
dayofmonth = DayofMonth) %>%
mutate_at(.vars = c("Month", "DayofMonth"),
.funs = str_pad, 2, "left", 0) %>%
unite(col = 'date', Year, Month, DayofMonth, sep = '-') %>%
mutate(date = lubridate::ymd(date)) %>%
mutate(quarter = quarter(date),
week = isoweek(date)) %>%
select(date, year, month, dayofmonth, quarter, week, DayOfWeek, everything())
df %>%
group_by(quarter) %>%
summarise(flights = n()) %>%
ungroup() %>%
mutate(`delta flights` = flights - lag(flights, 1),
quarter = as.factor(quarter)) %>%
ggplot(aes(x = quarter, y = `delta flights`)) +
geom_col()
df %>%
group_by(month) %>%
summarise(distance = sum(Distance)) %>%
ungroup() %>%
mutate(`delta distance` = distance - lag(distance, 1),
quarter = as.factor(month)) %>%
ggplot(aes(x = month, y = `delta distance`)) +
geom_col()
df %>%
group_by(month) %>%
summarise(distance = sum(Distance)) %>%
ungroup() %>%
mutate(`delta distance` = distance - lag(distance, 1),
quarter = as.factor(month)) %>%
df %>%
group_by(month) %>%
summarise(distance = sum(Distance)) %>%
ungroup() %>%
mutate(`delta distance` = distance - lag(distance, 1),
quarter = as.factor(month))
df %>%
group_by(month) %>%
summarise(distance = sum(Distance)) %>%
ungroup() %>%
mutate(`delta distance` = distance - lag(distance, 1),
quarter = as.factor(month))
df %>%
group_by(month) %>%
summarise(distance = sum(Distance)) %>%
ungroup() %>%
mutate(`delta distance` = distance - lag(distance, 1),
month = as.factor(month)) %>%
ggplot(aes(x = month, y = `delta distance`)) +
geom_col()
df %>%
select(carrier = UniqueCarrier,
month) %>%
group_by(carrier, month) %>%
summarise (flights = n()) %>%
ungroup() %>%
mutate(`max flights` = max(flights),
`flights normalized` = flights / `max flights`) %>%
select(carrier, month, `flights normalized`) %>%
pivot_wider(names_from = month,
values_from = `flights normalized`,
values_fill = 0)
df %>%
select(carrier = UniqueCarrier,
month) %>%
group_by(carrier, month) %>%
summarise (flights = n()) %>%
ungroup() %>%
mutate(`max flights` = max(flights),
`flights normalized` = flights / `max flights`) %>%
select(carrier, month, `flights normalized`) %>%
mutate(month = as.factor(month)) %>%
ggplot(aes(x = carrier,
y = month,
fill = `flights normalized`)) +
geom_tile()
df %>%
select(carrier = UniqueCarrier,
month) %>%
group_by(carrier, month) %>%
summarise (flights = n()) %>%
ungroup() %>%
mutate(`max flights` = max(flights),
`flights normalized` = flights / `max flights`) %>%
select(carrier, month, `flights normalized`) %>%
mutate(month = as.factor(month)) %>%
ggplot(aes(x = carrier,
y = month,
fill = `flights normalized`)) +
geom_tile() +
scale_fill_viridis_c(option = "magma") +
theme_minimal()
df <- df %>%
mutate(year = Year,
month = Month,
dayofmonth = DayofMonth)
df <- hflights
df <- df %>%
mutate(year = Year,
month = Month,
dayofmonth = DayofMonth) %>%
mutate(across(.vars = c("Month", "DayofMonth"),
.funs = str_pad, 2, "left", 0)) %>%
unite(col = 'date', Year, Month, DayofMonth, sep = '-') %>%
mutate(date = lubridate::ymd(date)) %>%
mutate(quarter = quarter(date),
week = isoweek(date)) %>%
select(date, year, month, dayofmonth, quarter, week, DayOfWeek, everything())
df <- df %>%
mutate(year = Year,
month = Month,
dayofmonth = DayofMonth) %>%
mutate(across(.cols = c("Month", "DayofMonth"),
.fns = str_pad, 2, "left", 0)) %>%
unite(col = 'date', Year, Month, DayofMonth, sep = '-') %>%
mutate(date = lubridate::ymd(date)) %>%
mutate(quarter = quarter(date),
week = isoweek(date)) %>%
select(date, year, month, dayofmonth, quarter, week, DayOfWeek, everything())
df <- df %>%
mutate(year = Year,
month = Month,
dayofmonth = DayofMonth) %>%
mutate(across(c("Month", "DayofMonth"),
str_pad, 2, "left", 0)) %>%
unite(col = 'date', Year, Month, DayofMonth, sep = '-') %>%
mutate(date = lubridate::ymd(date)) %>%
mutate(quarter = quarter(date),
week = isoweek(date)) %>%
select(date, year, month, dayofmonth, quarter, week, DayOfWeek, everything())
library(dplyr)
library(tidyr)
library(ggplot2)
library(hflights)
df <- hflights
df <- df %>%
mutate(year = Year,
month = Month,
dayofmonth = DayofMonth) %>%
mutate(across(c("Month", "DayofMonth"),
str_pad, 2, "left", 0)) %>%
unite(col = 'date', Year, Month, DayofMonth, sep = '-') %>%
mutate(date = lubridate::ymd(date)) %>%
mutate(quarter = quarter(date),
week = isoweek(date)) %>%
select(date, year, month, dayofmonth, quarter, week, DayOfWeek, everything())
df <- df %>%
mutate(year = Year,
month = Month,
dayofmonth = DayofMonth) %>%
mutate(across(.cols = c("Month", "DayofMonth"),
.fns = str_pad, 2, "left", 0)) %>%
unite(col = 'date', Year, Month, DayofMonth, sep = '-') %>%
mutate(date = lubridate::ymd(date)) %>%
mutate(quarter = quarter(date),
week = isoweek(date)) %>%
select(date, year, month, dayofmonth, quarter, week, DayOfWeek, everything())
df <- hflights
df <- df %>%
mutate(year = Year,
month = Month,
dayofmonth = DayofMonth) %>%
mutate(across(.cols = c("Month", "DayofMonth"),
.fns = str_pad, 2, "left", 0)) %>%
unite(col = 'date', Year, Month, DayofMonth, sep = '-') %>%
mutate(date = lubridate::ymd(date)) %>%
mutate(quarter = quarter(date),
week = isoweek(date)) %>%
select(date, year, month, dayofmonth, quarter, week, DayOfWeek, everything())
ibrary(dplyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tibble)
library(stringr)
mpg <- mpg
mpg %>%
summarize(across(.cols = everything(),
.fns = n_distinct()))
mpg %>%
summarize(across(.cols = everything(),
.fns = n_distinct))
mpg %>%
summarize(across(everything(),
n_distinct))
mpg %>%
summarize(across(c(displ, cty, hwy),
mean))
mpg %>%
summarize(across(where(is.numeric)))
mpg %>%
summarize(across(where(is.numeric)))
mpg %>%
summarize(across(where(is.numeric),
median))
mpg %>%
summarize(across(where(is.character),
n_distinct))
mpg %>%
summarise(across(where(is.numeric),
list(avg = ~mean(.x, na.rm = TRUE),
med = ~median(.x, na.rm = TRUE))))
avgmed <- list(avg = ~mean(.x, na.rm = TRUE),
med = ~median(.x, na.rm = TRUE))
mpg %>%
summarise(across(where(is.numeric),
avgmed
))
mpg %>%
summarise(across(where(is.numeric),
avgmed,
.names = "{.fn}:{.col}"))
